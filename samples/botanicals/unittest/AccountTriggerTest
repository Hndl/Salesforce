@isTest
public class AccountTriggerTest {
    static String CONST_NAME = 'Test_001';
    static String CONST_PHONEPREFIX = '(415)555-8';
    static String CONST_BILLINGCITY = 'CA';
    static Integer MAX_ACCOUNT = 200;
    
     public static Account makeAcc ( Integer n){
     	Account acc = new Account(
    						Name=AccountTriggerTest.CONST_NAME,
    						Phone=AccountTriggerTest.CONST_PHONEPREFIX+n,
    						NumberOfEmployees=n,
    						BillingState=AccountTriggerTest.CONST_BILLINGCITY);
    	return (acc);
    }
    
    public static void test_001_setup(){
        
        // remove all accounts related to this test. ensure we have a common starting point
        List<Account> lstAccount = [SELECT id, Name
                                    FROM Account
                                    WHERE Name = :AccountTriggerTest.CONST_NAME];
        if ( lstAccount.size() > 0 ) {
            try{
                delete lstAccount;
            } catch (DmlException ex ) {
                System.debug(ex.getMessage());
            }
        }
        
        System.debug('test_001: exec SETUP : removed ' + lstAccount.size() + ' accounts');
    }
        
    
    public static Integer test_001_verify_01 () { 
        List<Account> lstAccount = [SELECT id, Name
                                    FROM Account
                                    WHERE Name = :AccountTriggerTest.CONST_NAME];
        
        System.debug('test_001: exec VERIFY[1] : found ' + lstAccount.size() + ' accounts');
        
       	return (lstAccount.size());
    }
     public static Integer test_001_verify_02 () { 
        List<Account> lstAccount = [SELECT id, Name
                                    FROM Account
                                    WHERE Name = :AccountTriggerTest.CONST_NAME
                                    AND ShippingState = :AccountTriggerTest.CONST_BILLINGCITY
                                    AND BillingState = :AccountTriggerTest.CONST_BILLINGCITY];
        
        System.debug('test_001: exec VERIFY[2] : found ' + lstAccount.size() + ' accounts');
        
       	return (lstAccount.size());
    }
    
    static testMethod void test_001( ){
        
        // setup
        System.debug('test_001: exec SETUP');
        AccountTriggerTest.test_001_setup();
        
        // Test 001
        // Create n Accounts will fix billing state as CA
       	 System.debug('test_001: exec TEST_001 - START'); 
        List<Account> lstAcc = new List<Account>();
          System.debug('test_001: exec TEST_001 - ACC Creating.'); 
        for (Integer i = 0 ; i < AccountTriggerTest.MAX_ACCOUNT ; i++ ){
        	lstAcc.add(AccountTriggerTest.makeAcc(i));
            System.debug('test_001: exec TEST_001 - ACC Created '  + i ); 
        }
        System.debug('test_001: exec TEST_001 - ACC Created.'); 
        
        if (lstAcc.size() > 0 ){
            insert lstAcc;
        }
        System.debug('test_001: exec TEST_001 - INSERTED'); 
        
        // test & verify
        Integer accountCount = AccountTriggerTest.test_001_verify_01();
        Integer accountCountBillingShippingMatch = AccountTriggerTest.test_001_verify_02();
        
      	System.debug('test_001: VERIFY TEST_001 - Expected ' + AccountTriggerTest.MAX_ACCOUNT + ' accounts, found ' + accountCount + ' accounts'); 
        System.assertEquals(AccountTriggerTest.MAX_ACCOUNT, accountCount);  
        
        System.debug('test_001: VERIFY TEST_002 - Expected ' + AccountTriggerTest.MAX_ACCOUNT + ' accounts, found ' + accountCountBillingShippingMatch + ' accounts');       	
        System.assertEquals(AccountTriggerTest.MAX_ACCOUNT, accountCountBillingShippingMatch);  
    }
}
