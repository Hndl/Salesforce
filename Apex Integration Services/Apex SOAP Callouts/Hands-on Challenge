public class ParkLocator {
    
    private static ParkService.ParksImplPort park_data_service = new ParkService.ParksImplPort();  
    
 	public static String[] country (String countryName) {
        if ( countryName == null || countryName.trim().length() == 0 )
            return new String[]{};
                
        return ParkLocator.park_data_service.byCountry(countryName);
    }
}

@isTest
private class ParkLocatorTest {
    
    @isTest static void testCalloutNoName() {           
		String[] countryparks0 = ParkLocator.country((String)null);    
        System.assertEquals(0,countryparks0.size(),'Parks have been returned, thats not expected! NULL' );
        
        String[] countryparks1 = ParkLocator.country('');    
        System.assertEquals(0,countryparks1.size(),'Parks have been returned, thats not expected! Zero Len String' );
        
        String[] countryparks2 = ParkLocator.country('    ');    
        System.assertEquals(0,countryparks2.size(),'Parks have been returned, thats not expected! WhiteSpace' );
    }
    
    @isTest static void testCallout() {              
    	
        final String COUNTRYNANE = 'Japan';
        final String[] PARKS = new String[]{'Shiretoko National Park','Oze National Park','Hakusan National Park'};
        
        Test.setMock(WebServiceMock.class, new ParkServiceMock());
        
    	String[] countryparks = ParkLocator.country(COUNTRYNANE);    
        
        System.assertEquals(PARKS.size(), countryparks.size(),'The '+ COUNTRYNANE + ' result has incorrect number of parks');
        
        for ( Integer i = 0 ; i < countryparks.size() ; i++ ) 
        	System.assertEquals(PARKS[i], countryparks[i]);
        
        
    }
}

@isTest
global class ParkLocatorTestMock implements WebServiceMock {
   global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
        // start - specify the response you want to send
        ParkService.byCountryResponse response_x = new ParkService.byCountryResponse();        
		response_x.return_x = new String[]{'Shiretoko National Park','Oze National Park','Hakusan National Park'};
        response.put('response_x', response_x); 
   }
}



<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://parks.services/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" name="ParksImplService" targetNamespace="http://parks.services/">
  <wsdl:types>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://parks.services/" elementFormDefault="unqualified" targetNamespace="http://parks.services/" version="1.0">

  <xs:element name="byCountry" type="tns:byCountry"/>

  <xs:element name="byCountryResponse" type="tns:byCountryResponse"/>

  <xs:complexType name="byCountry">
    <xs:sequence>
      <xs:element minOccurs="0" name="arg0" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="byCountryResponse">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

</xs:schema>
  </wsdl:types>
  <wsdl:message name="byCountry">
    <wsdl:part element="tns:byCountry" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="byCountryResponse">
    <wsdl:part element="tns:byCountryResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="Parks">
    <wsdl:operation name="byCountry">
      <wsdl:input message="tns:byCountry" name="byCountry">
    </wsdl:input>
      <wsdl:output message="tns:byCountryResponse" name="byCountryResponse">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="ParksImplServiceSoapBinding" type="tns:Parks">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="byCountry">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="byCountry">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="byCountryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="ParksImplService">
    <wsdl:port binding="tns:ParksImplServiceSoapBinding" name="ParksImplPort">
      <soap:address location="https://th-apex-soap-service.herokuapp.com/service/parks"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
